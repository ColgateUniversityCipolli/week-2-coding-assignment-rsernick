install.packages("stringr")
library(stringr)
help(stringr)
Music/OfficeStuff
help
load("Music")
(trap.area = sum(((integrand(left.points+right.points)/2)*delta.x)
# Write code for answer here.
(trap.area = sum(((integrand(left.points+right.points)/2)*delta.x)
(trap.area = sum(((integrand(left.points+right.points)/2)*delta.x)))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points)/2)*delta.x)))
mid.points <- (left.points+right.points)/2
\documentclass{article}
\documentclass{article}
library(tinytex)
\documentclass{article}
# Chunk 1
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
# Chunk 2
a <- 0
b <- 2
n.rect <- 100
(delta.x <- (b-a)/n.rect)
# Chunk 3
left.points <- a + 0:99*(delta.x)
(left.area <- sum(delta.x*(integrand(left.points))))
# Chunk 4
right.points <- a + 1:100*(delta.x)
(right.area <- sum(delta.x*(integrand(right.points))))
# Chunk 5
mid.points <- (left.points+right.points)/2
(mid.area <- sum(delta.x*(integrand(mid.points))))
# Chunk 6
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points)/2)*delta.x)))
<<size="scriptsize", warning=FALSE, message=FALSE>>=
# Write code for answer here.
(trap.area = sum(((integrand(left.points+right.points)/2)*delta.x)))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points)/2)*delta.x)))
# Write code for answer here.
trap.points = (left.points+right.points)
(trap.area = sum(((integrand(trap.points)/2)*delta.x)))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points)/2)*delta.x)))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points)/2)*delta.x)))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points)/4)*delta.x)))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points)/2)*delta.x)))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points)/)*delta.x)/2))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points))*delta.x)/2))
# Write code for answer here.
(trap.area = sum(((integrand(left.points)+integrand(right.points))*delta.x)/2))
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
if(method == "Left"){
left.points <- a + 0:99*(delta.x)
(area <- sum(delta.x*(integrand(left.points))))
}else if(method == "Right"){
right.points <- a + 1:100*(delta.x)
(area <- sum(delta.x*(integrand(right.points))))
}else if(method == "Midpoint"){
left.points <- a + 0:99*(delta.x)
right.points <- a + 1:100*(delta.x)
mid.points <- (left.points+right.points)/2
(area <- sum(delta.x*(integrand(mid.points))))
}else if(method == "Trapezoidial"){
left.points <- a + 0:99*(delta.x)
right.points <- a + 1:100*(delta.x)
(area = sum(((integrand(left.points)+integrand(right.points))*delta.x)/2))
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
######################################
# Compare to numerical integral
######################################
integrate(f = integrand, # integrate() is an R function
lower = 0,     # that completes numerical
upper = 2)     # integration
